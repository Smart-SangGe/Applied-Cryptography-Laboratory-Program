import binascii

def AES_encrypt(key, data):
    # 将需要加密的数据按16bytes进行分块
    state = [data[i:i+16] for i in range(0, len(data), 16)]

    # 若最后一个数据块不满16bytes，则以数据00进行填充
    if len(state[-1]) < 16:
        state[-1] += b'\x00' * (16 - len(state[-1]))
        
    # 扩展密钥
    round_keys = generate_round_keys(key)
    # 执行第一轮轮密钥加
    add_round_key(state, round_keys[0])

    # 执行后9轮加密操作
    for i in range(1, 10):
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_keys[i])

    # 执行
    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, round_keys[10])

    # Flatten the state array and return the result
    return b''.join(state)


def generate_round_keys(key):
    # 初始化密钥矩阵
    round_keys = [[[0 for _ in range(4)] for _ in range(4)] for _ in range(11)]

    # 放入初始密钥
    for i in range(4):
        for j in range(4):
            round_keys[0][i][j] = key[i+4*j]

    rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

    # 进行密钥扩展
    for i in range(1, 11):
        # 交换次序
        round_keys[i][0][0] = round_keys[i-1][1][3]
        round_keys[i][1][0] = round_keys[i-1][2][3]
        round_keys[i][2][0] = round_keys[i-1][3][3]
        round_keys[i][3][0] = round_keys[i-1][0][3]

        # 利用s盒进行替换
        for j in range(4):
            round_keys[i][j][0] = sub_bytes_column(round_keys[i][j][0])

        # 与常量进行异或
        round_keys[i][0][0] = round_keys[i][0][0] ^ rcon[i]

        # 进行密钥扩展
        for k in range(4):
            round_keys[i][k][0] = round_keys[i][k][0] ^ round_keys[i-1][k][0]
        for j in range(1, 4):
            for k in range(4):
                round_keys[i][k][j] = round_keys[i][k][j -
                                                       1] ^ round_keys[i-1][k][j]

    return round_keys


def add_round_key(state, round_key):
    # 依次对矩阵进行异或操作
    for i in range(len(state)):
        temp = b""
        for j in range(4):
            for k in range(4):
                temp += (state[i][j+k*4] ^ round_key[k][j]).to_bytes(1, "big")
        state[i] = temp
    return state


def sub_bytes_column(state):
    # 设置s盒
    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]
    # 根据s盒进行替换
    return sbox[state]


def sub_bytes(state):
    # 设置s盒
    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

    # 根据s盒进行替换
    for i in range(len(state)):
        temp = b""
        for j in range(16):
            temp += (sbox[state[i][j]]).to_bytes(1, "big")
        state[i] = temp
    return state


def shift_rows(state):
    # 行移位
    for i in range(len(state)):
        temp = state[i][0].to_bytes(1, "big")+state[i][5].to_bytes(
            1, "big")+state[i][8].to_bytes(1, "big")+state[i][12].to_bytes(1, "big")
        temp += state[i][5].to_bytes(1, "big") + state[i][9].to_bytes(
            1, "big")+state[i][13].to_bytes(1, "big")+state[i][1].to_bytes(1, "big")
        temp += state[i][10].to_bytes(1, "big")+state[i][14].to_bytes(
            1, "big")+state[i][2].to_bytes(1, "big")+state[i][6].to_bytes(1, "big")
        temp += state[i][15].to_bytes(1, "big")+state[i][3].to_bytes(
            1, "big")+state[i][7].to_bytes(1, "big")+state[i][11].to_bytes(1, "big")

        state[i] = temp

    return state


def mix_columns(state):

    matrix = [2, 3, 1, 1,
              1, 2, 3, 1,
              1, 1, 2, 3,
              3, 1, 1, 2]

    # 进行矩阵乘法
    for i in range(len(state)):
        result = [0] * 16
        temp = b""

        for j in range(4):
            result[4*j] = gf_mult(matrix[4*j], state[i][0]) ^ gf_mult(matrix[4*j+1], state[i]
                                                                      [1]) ^ gf_mult(matrix[4*j+2], state[i][2]) ^ gf_mult(matrix[4*j+3], state[i][3])
            result[4*j+1] = gf_mult(matrix[4*j], state[i][4]) ^ gf_mult(matrix[4*j+1], state[i]
                                                                        [5]) ^ gf_mult(matrix[4*j+2], state[i][6]) ^ gf_mult(matrix[4*j+3], state[i][7])
            result[4*j+2] = gf_mult(matrix[4*j], state[i][8]) ^ gf_mult(matrix[4*j+1], state[i]
                                                                        [9]) ^ gf_mult(matrix[4*j+2], state[i][10]) ^ gf_mult(matrix[4*j+3], state[i][11])
            result[4*j+3] = gf_mult(matrix[4*j], state[i][12]) ^ gf_mult(matrix[4*j+1], state[i]
                                                                         [13]) ^ gf_mult(matrix[4*j+2], state[i][14]) ^ gf_mult(matrix[4*j+3], state[i][15])

        for j in range(4):
            for k in range(4):
                temp += result[j+4*k].to_bytes(1, "big")

        state[i] = temp

    return state


def xtime(a, count):
    for i in range(0, count):

        if a >> 7 == 1:
            a = (0xff & (a << 1)) ^ 0x1b
        else:
            a = a << 1
    return a

# GF(2^8)有限域上乘法函数
def gf_mult(a, b):
    if a==0 or b==0:
        return 0
    index_of_1_list = []  # 获得所有位数为1的下标 例如: 10011 返回一个[0,1,4] 的列表
    count = 0

    while b != 0:
        if b & 0x1 == 1:
            index_of_1_list.append(count)
        count += 1
        b = b >> 1

    xtime_result_list = []
    # 获取所有1的下标后 算出每次的结果 放在xtime_result_list列表中
    for i in index_of_1_list:
        xtime_result_list.append(xtime(a, i))

    # 将所有结果异或 得到的就是结果
    res = xtime_result_list[0]
    for i in range(1, len(xtime_result_list)):
        res = res ^ xtime_result_list[i]
    return res


# aes-128算法的密钥为128bits，16bytes
key = b'abcdefghijklmnop'

data = b'abcdefghijklmnop'

encrypted = AES_encrypt(key, data)

print(binascii.hexlify(encrypted) )
